create table public.users (
  id uuid not null default gen_random_uuid (),
  name text not null,
  email text not null,
  role text not null,
  department text not null,
  reporting_manager text null,
  status boolean null default true,
  last_login timestamp with time zone null,
  created_at timestamp with time zone null default now(),
  updated_at timestamp with time zone null default now(),
  created_by uuid null,
  updated_by uuid null,
  photo_url text null,
  user_id bigint generated by default as identity not null,
  constraint users_pkey primary key (id),
  constraint users_email_key unique (email),
  constraint users_created_by_fkey foreign KEY (created_by) references admin_users (id),
  constraint users_updated_by_fkey foreign KEY (updated_by) references admin_users (id),
  constraint users_role_check check (
    (
      role = any (
        array['HOD'::text, 'Associate'::text, 'Crew'::text]
      )
    )
  )
) TABLESPACE pg_default;

create index IF not exists idx_users_email on public.users using btree (email) TABLESPACE pg_default;

create index IF not exists idx_users_role on public.users using btree (role) TABLESPACE pg_default;

create index IF not exists idx_users_department on public.users using btree (department) TABLESPACE pg_default;

create index IF not exists idx_users_status on public.users using btree (status) TABLESPACE pg_default;

create trigger update_users_updated_at BEFORE
update on users for EACH row
execute FUNCTION update_updated_at_column ();